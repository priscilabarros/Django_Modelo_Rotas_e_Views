* Para passar dados para o template - quando se deseja passar mais de uma informação.Cria-se um dicionario:

def index(request):
    
    receitas = {
        1:'Lasanha',
        2:'Sopa de legumes',
        3:'Sorvete'
    }    

    dados = {
        'nome_das_receitas':receitas
    }
    return render(request,'index.html',dados)

E na parte de index temos que adequar a estrutura para garantir que serão criadas receitas dinamicamente. Exemplo:

{% for chave, valor in nome_das_receitas.items %}

* Passar informações para o template - no arquivo de views passe um contexto para o template . Exemplo:

def index(request):
    return render(request,'index.html',{'nome_da_receita':'Sorvete'})

e na parte de templates no index.html é posto não o código em python mas um retorno de exibição em python . Exemplo:

<h5>{{nome_da_receita }}</h5>

* Partial - são pequenos trechos de Html que podem ser compartilhados entre páginas. Dentro da pasta templates na app crie uma nova pasta chamada partials, dentro de partials crie files html dos itens que você queira dar manutenção por exemplo menu.html.

No código principal remova do codigo a parte de menu e adicione o codigo removido no arquivo menu.html e no index.html insira:
 {% include 'partials/menu.html'%}

para direcionar o codigo que deve ser usado no menu.html. E no menu.html insira os arquivos staticos no inicio da pagina:
{% load static %}

* Estender um html - criar uma pasta dentro de templates chamado base.html copiar para o base todo codigo html de index e receita html.
em base.html copie as partes em comum do index e receita, adicionando no inicio da pagina:
{% load static %}

e em receita e indice html remova as partes em comum adicionando no inicio da pagina:
{% extends 'base.html' %}
{% load static %}
{% block content %}

e no final da pagina:
{% endblock %}

* informar arquivos staticos - para informar ao django arquivos staticos, comando: python manage.py collectstatic

add o código em python com "{% função 'XXXXX' %}'"
Exemplo:
antes: "index.html" depois: "{% url 'index' %}"

* Referenciar os arquivos estaticos - vá até a pasta principal do projeto em settings.py na area de Static files. Exemplo:

STATIC_ROOT = os.path.join(BASE_DIR,'static')
STATIC_URL = '/statis/'
STATICFILES_DIR = [os.path.join(BASE_DIR,'alurareceita/static')]

* Associar uma app a um template - na pasta principal vá ate settings.py, na area de templates adicione sua app. Exemplo:

TEMPLATES = [
...
    'DIRS': [os.path.join(BASE_DIR,'receitas/templates')],
]

* Arquivos estaticos -  no django esses arquivos são as imagens, arquivos CSS, Javascript e etc.

* Criar um requisição para uma página html - vá na parte de views da sua app e faça uma requisição para sua página html. 
Exemplo:
from django.shortcuts import render 

def index(request):
    return render(request,'index.html')
    
def receita(request):
    return render(request,'receita.html')

* Criar uma rota para um app - na pasta principal vá ate urls e inclua o path. Exemplo:

from django.urls import path, include

urlpatterns = [
    path('',include('receitas.urls')),
    path('receita',views.receita,name='receita'),
]

* Criar uma view em um app - vai no arquivo de views dentro do app  e crie um arquivo. Exemplo:

from django.http import HttpResponse

def index(request):
    return HttpResponse('<h1>Receitas</h1>')

* Criar uma url para um app - Crie um novo file dentrode sua app com o nome url.py, neste novo arquivo importe as urls e views do Django. Exemplo:

from django.urls import path

from . import views

urlpatterns = [
    path('',views.index,name='index')
]

OBS: primeiro parametro é a rota, segundo é a view e terceiro é o name space do app para essas entradas urls.

* Registrar um app - no arquivo apps.py deve existir uma classe configs possui o name da app que sera utilizado no registro. Em Settings.py dentro da pasta principal do projeto, verifique o trecho INSTALLED_APPS e atribua a nova app. Exemplo:

INSTALLED_APPS = [
    'receitas',


* Criar um app - python manage.py startapp "nome _do_app"
Exemplo: python manage.py startapp receitas

* App - uma aplicação que tem uma determinada ação. Exemplo mostrar receitas em um sites.

* Comandos que o Manage.py pode fazer:
    - python manage.py help [ abre uma janela de ajuda do Manage.py ]
    - python manage.py runserver [ sobe o servidor ]

* Como alterar a linguagem do seu projeto:
Acesse o arquivo settings.py e defina a configuração " LANGUAGE_CODE = 'pt-br' "

* Como alterar o time zone do seu projeto:
Acesse o arquivo settings.py e defina a configuração " TIME_ZONE = 'America/Sao_Paulo' "

* Arquivos dentro da pasta de um projeto:
- __init.py__ : indica que o diretorio deve ser considerado um pacote.
- settings.py : arquivo de configurações relacionados ao projeto.
- urls.py: declaração de todas urls para o projeto
- wsgi.py: ponto de integração de servidores web

* Comandos que o Django pode fazer:
    - django-admin help [ abre uma janela de ajuda do Django ]
    - django-admin startproject "nome_do_projeto" . [ inicia um projeto no django, se houver este ponto final no comando indica que só será criada uma pasta com o nome do projeto e as demais subpastas já serão do framework, se o comando for sem o . então será criada uma subpasta de introdução. ]

Acessar a venv pelo Pycharm:

* Configurações de ambiente:
- Comando "pip freeze" mostra todos os modulos instalados no ambiente virtual

- utilizar um editor de código como pycharm ou visual code ou etc

- Criar uma venv: digitar o comando: python3 -m venv ./venv

- Instalar o Django: pip install Django==2.2.6

- Instalar o python
OBS: o comando "python3 --version" retorna a versão instalada do python


